#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
using namespace std;

int timeToSpreadInfo(int n, vector<vector<int>>& adj) {
    vector<bool> visited(n, false);
    queue<int> q;

    q.push(0);  // Starting from node 0
    visited[0] = true;

    int time = 0;

    while (true) {
        int sz = q.size();  // Nodes that can act this second
        if (sz == 0) break;

        queue<int> nextRound;  // Store new nodes to be informed in this round

        while (sz--) {
            int node = q.front(); q.pop();

            // This node can inform ONLY ONE unvisited neighbor
            for (int& neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    nextRound.push(neighbor);
                    break;  // only ONE neighbor allowed per time unit
                }
            }
        }

        // Push newly informed nodes to main queue
        while (!nextRound.empty()) {
            q.push(nextRound.front());
            nextRound.pop();
        }

        time++;
    }

    return time;
}

int main() {
    int e;  
    cin >> e;
    int n = 9;
    vector<vector<int>> adj(n);

    for (int i = 0; i < e; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);  
    }

    int result = timeToSpreadInfo(n, adj);
    cout << "Time taken to spread info: " << result << " units" << endl;

    return 0;
}
